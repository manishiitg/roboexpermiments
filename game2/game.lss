
game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000704  00000798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800064  00800064  0000079c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b5  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000029b  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018e  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000414  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012c  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  8a:	0c 94 80 03 	jmp	0x700	; 0x700 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay>:
THE DEFAULT _DELAY_MS FUNCTION CASUSES THE ATMEGA TO FREEZE
THIS CAUSES ISSUE IN LED SEQUENCE, I.E WHEN THE INTERRUPT BUTTON IS 
PRESSED, THE LED SEQUENCE ALSO STOPPED. SO THIS NEW DELAY HAS BEEN
USED. THIS DOESN'T CAUSE THE ATMEGA TO FREEZE 
**/
void delay(unsigned long delay) {
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <delay+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <delay+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9b 01       	movw	r18, r22
  a0:	ac 01       	movw	r20, r24
  volatile unsigned long i = 0;
  a2:	19 82       	std	Y+1, r1	; 0x01
  a4:	1a 82       	std	Y+2, r1	; 0x02
  a6:	1b 82       	std	Y+3, r1	; 0x03
  a8:	1c 82       	std	Y+4, r1	; 0x04
  for (i = 0; i < delay; i++) {
  aa:	19 82       	std	Y+1, r1	; 0x01
  ac:	1a 82       	std	Y+2, r1	; 0x02
  ae:	1b 82       	std	Y+3, r1	; 0x03
  b0:	1c 82       	std	Y+4, r1	; 0x04
  b2:	0c c0       	rjmp	.+24     	; 0xcc <delay+0x3a>
      __asm__ __volatile__ ("nop");
  b4:	00 00       	nop
PRESSED, THE LED SEQUENCE ALSO STOPPED. SO THIS NEW DELAY HAS BEEN
USED. THIS DOESN'T CAUSE THE ATMEGA TO FREEZE 
**/
void delay(unsigned long delay) {
  volatile unsigned long i = 0;
  for (i = 0; i < delay; i++) {
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	ab 81       	ldd	r26, Y+3	; 0x03
  bc:	bc 81       	ldd	r27, Y+4	; 0x04
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	a1 1d       	adc	r26, r1
  c2:	b1 1d       	adc	r27, r1
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	9a 83       	std	Y+2, r25	; 0x02
  c8:	ab 83       	std	Y+3, r26	; 0x03
  ca:	bc 83       	std	Y+4, r27	; 0x04
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	ab 81       	ldd	r26, Y+3	; 0x03
  d2:	bc 81       	ldd	r27, Y+4	; 0x04
  d4:	82 17       	cp	r24, r18
  d6:	93 07       	cpc	r25, r19
  d8:	a4 07       	cpc	r26, r20
  da:	b5 07       	cpc	r27, r21
  dc:	58 f3       	brcs	.-42     	; 0xb4 <delay+0x22>
      __asm__ __volatile__ ("nop");
  }
}
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <startLedSeq>:


void startLedSeq(){
  ec:	2f 92       	push	r2
  ee:	3f 92       	push	r3
  f0:	4f 92       	push	r4
  f2:	5f 92       	push	r5
  f4:	6f 92       	push	r6
  f6:	7f 92       	push	r7
  f8:	8f 92       	push	r8
  fa:	9f 92       	push	r9
  fc:	af 92       	push	r10
  fe:	bf 92       	push	r11
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
    /**
	START LED SEQUENCE ON THE 16 LED's
	SELECT A DIFFERENT SPEED LEVEL EACH TIME
	A SPECIAL DELAY FUNCTION IS USED FOR DELAY
	**/
    PORTB = 0x00;
 110:	18 ba       	out	0x18, r1	; 24
    PORTA = 0x00;
 112:	1b ba       	out	0x1b, r1	; 27
	int speedToRun = speed[speedSelect];
 114:	40 90 68 00 	lds	r4, 0x0068
 118:	50 90 69 00 	lds	r5, 0x0069
 11c:	f2 01       	movw	r30, r4
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e4 59       	subi	r30, 0x94	; 148
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
	PORTD &= ~(1 << PIND0);
 12a:	90 98       	cbi	0x12, 0	; 18
	PORTD &= ~(1 << PIND1);
 12c:	91 98       	cbi	0x12, 1	; 18
    for(i = 0;i<=16;i++){
 12e:	10 92 63 00 	sts	0x0063, r1
 132:	10 92 62 00 	sts	0x0062, r1
 136:	c0 91 60 00 	lds	r28, 0x0060
 13a:	d0 91 61 00 	lds	r29, 0x0061
		if(i >= 7){
		   ledLight = i - 8;
		    PORTA = 1 << ledLight;
			PORTB = 0x00;
		}else{
			PORTB = 1 << ledLight;
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	22 2e       	mov	r2, r18
 142:	31 2c       	mov	r3, r1
		}
		//delay(speedToRun);
		_delay_ms(speedToRun);
 144:	3c 01       	movw	r6, r24
 146:	88 24       	eor	r8, r8
 148:	77 fc       	sbrc	r7, 7
 14a:	80 94       	com	r8
 14c:	98 2c       	mov	r9, r8
 14e:	70 c0       	rjmp	.+224    	; 0x230 <startLedSeq+0x144>
    PORTA = 0x00;
	int speedToRun = speed[speedSelect];
	PORTD &= ~(1 << PIND0);
	PORTD &= ~(1 << PIND1);
    for(i = 0;i<=16;i++){
	    if(stopSeq == 1){
 150:	80 91 6a 00 	lds	r24, 0x006A
 154:	90 91 6b 00 	lds	r25, 0x006B
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	09 f4       	brne	.+2      	; 0x15e <startLedSeq+0x72>
 15c:	70 c0       	rjmp	.+224    	; 0x23e <startLedSeq+0x152>
		   break;
		}
	    ledLight = i;
 15e:	c0 91 62 00 	lds	r28, 0x0062
 162:	d0 91 63 00 	lds	r29, 0x0063
		if(i >= 7){
 166:	80 91 62 00 	lds	r24, 0x0062
 16a:	90 91 63 00 	lds	r25, 0x0063
 16e:	07 97       	sbiw	r24, 0x07	; 7
 170:	7c f0       	brlt	.+30     	; 0x190 <startLedSeq+0xa4>
		   ledLight = i - 8;
 172:	c0 91 62 00 	lds	r28, 0x0062
 176:	d0 91 63 00 	lds	r29, 0x0063
 17a:	28 97       	sbiw	r28, 0x08	; 8
		    PORTA = 1 << ledLight;
 17c:	c1 01       	movw	r24, r2
 17e:	0c 2e       	mov	r0, r28
 180:	02 c0       	rjmp	.+4      	; 0x186 <startLedSeq+0x9a>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <startLedSeq+0x96>
 18a:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x00;
 18c:	18 ba       	out	0x18, r1	; 24
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <startLedSeq+0xb4>
		}else{
			PORTB = 1 << ledLight;
 190:	c1 01       	movw	r24, r2
 192:	0c 2e       	mov	r0, r28
 194:	02 c0       	rjmp	.+4      	; 0x19a <startLedSeq+0xae>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <startLedSeq+0xaa>
 19e:	88 bb       	out	0x18, r24	; 24
		}
		//delay(speedToRun);
		_delay_ms(speedToRun);
 1a0:	c4 01       	movw	r24, r8
 1a2:	b3 01       	movw	r22, r6
 1a4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__floatsisf>
 1a8:	5b 01       	movw	r10, r22
 1aa:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	4a e7       	ldi	r20, 0x7A	; 122
 1b2:	53 e4       	ldi	r21, 0x43	; 67
 1b4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__mulsf3>
 1b8:	7b 01       	movw	r14, r22
 1ba:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	5f e3       	ldi	r21, 0x3F	; 63
 1c4:	0e 94 37 02 	call	0x46e	; 0x46e <__cmpsf2>
 1c8:	88 23       	and	r24, r24
 1ca:	1c f4       	brge	.+6      	; 0x1d2 <startLedSeq+0xe6>
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	23 c0       	rjmp	.+70     	; 0x218 <startLedSeq+0x12c>
		__ticks = 1;
	else if (__tmp > 65535)
 1d2:	c8 01       	movw	r24, r16
 1d4:	b7 01       	movw	r22, r14
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	3f ef       	ldi	r19, 0xFF	; 255
 1da:	4f e7       	ldi	r20, 0x7F	; 127
 1dc:	57 e4       	ldi	r21, 0x47	; 71
 1de:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__gesf2>
 1e2:	18 16       	cp	r1, r24
 1e4:	ac f4       	brge	.+42     	; 0x210 <startLedSeq+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1e6:	c6 01       	movw	r24, r12
 1e8:	b5 01       	movw	r22, r10
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e2       	ldi	r20, 0x20	; 32
 1f0:	51 e4       	ldi	r21, 0x41	; 65
 1f2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__mulsf3>
 1f6:	0e 94 3b 02 	call	0x476	; 0x476 <__fixunssfsi>
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <startLedSeq+0x11c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fc:	89 e1       	ldi	r24, 0x19	; 25
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <startLedSeq+0x114>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 204:	61 50       	subi	r22, 0x01	; 1
 206:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 208:	61 15       	cp	r22, r1
 20a:	71 05       	cpc	r23, r1
 20c:	b9 f7       	brne	.-18     	; 0x1fc <startLedSeq+0x110>
 20e:	07 c0       	rjmp	.+14     	; 0x21e <startLedSeq+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 210:	c8 01       	movw	r24, r16
 212:	b7 01       	movw	r22, r14
 214:	0e 94 3b 02 	call	0x476	; 0x476 <__fixunssfsi>
 218:	cb 01       	movw	r24, r22
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <startLedSeq+0x12e>
    PORTB = 0x00;
    PORTA = 0x00;
	int speedToRun = speed[speedSelect];
	PORTD &= ~(1 << PIND0);
	PORTD &= ~(1 << PIND1);
    for(i = 0;i<=16;i++){
 21e:	80 91 62 00 	lds	r24, 0x0062
 222:	90 91 63 00 	lds	r25, 0x0063
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	90 93 63 00 	sts	0x0063, r25
 22c:	80 93 62 00 	sts	0x0062, r24
 230:	80 91 62 00 	lds	r24, 0x0062
 234:	90 91 63 00 	lds	r25, 0x0063
 238:	41 97       	sbiw	r24, 0x11	; 17
 23a:	0c f4       	brge	.+2      	; 0x23e <startLedSeq+0x152>
 23c:	89 cf       	rjmp	.-238    	; 0x150 <startLedSeq+0x64>
 23e:	d0 93 61 00 	sts	0x0061, r29
 242:	c0 93 60 00 	sts	0x0060, r28
			PORTB = 1 << ledLight;
		}
		//delay(speedToRun);
		_delay_ms(speedToRun);
	}
	if(i==16){
 246:	80 91 62 00 	lds	r24, 0x0062
 24a:	90 91 63 00 	lds	r25, 0x0063
 24e:	40 97       	sbiw	r24, 0x10	; 16
 250:	11 f4       	brne	.+4      	; 0x256 <startLedSeq+0x16a>
	   PORTB = 0x00;
 252:	18 ba       	out	0x18, r1	; 24
	   PORTA = 0x00;
 254:	1b ba       	out	0x1b, r1	; 27
	}
	i=0;
 256:	10 92 63 00 	sts	0x0063, r1
 25a:	10 92 62 00 	sts	0x0062, r1
	ledLight = 0;
 25e:	10 92 61 00 	sts	0x0061, r1
 262:	10 92 60 00 	sts	0x0060, r1
	stopSeq = 0;
 266:	10 92 6b 00 	sts	0x006B, r1
 26a:	10 92 6a 00 	sts	0x006A, r1
	ledStarted = 0;
 26e:	10 92 67 00 	sts	0x0067, r1
 272:	10 92 66 00 	sts	0x0066, r1
	speedSelect++;
 276:	c2 01       	movw	r24, r4
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 69 00 	sts	0x0069, r25
 27e:	80 93 68 00 	sts	0x0068, r24
	if(speedSelect >= 9){
 282:	09 97       	sbiw	r24, 0x09	; 9
 284:	24 f0       	brlt	.+8      	; 0x28e <startLedSeq+0x1a2>
	   speedSelect = 0;
 286:	10 92 69 00 	sts	0x0069, r1
 28a:	10 92 68 00 	sts	0x0068, r1
	}
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	cf 90       	pop	r12
 29e:	bf 90       	pop	r11
 2a0:	af 90       	pop	r10
 2a2:	9f 90       	pop	r9
 2a4:	8f 90       	pop	r8
 2a6:	7f 90       	pop	r7
 2a8:	6f 90       	pop	r6
 2aa:	5f 90       	pop	r5
 2ac:	4f 90       	pop	r4
 2ae:	3f 90       	pop	r3
 2b0:	2f 90       	pop	r2
 2b2:	08 95       	ret

000002b4 <checkGameStart>:
void checkGameStart(){
    /**
	SOFTWARE LEVEL BOUNCE CHECK
	START LED SEQ IF BUTTON ACTUALLY PRESSED
	**/
    buttonGamePressed++;
 2b4:	80 91 64 00 	lds	r24, 0x0064
 2b8:	90 91 65 00 	lds	r25, 0x0065
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 65 00 	sts	0x0065, r25
 2c2:	80 93 64 00 	sts	0x0064, r24
    if(buttonGamePressed > 100 && ledStarted == 0){
 2c6:	85 36       	cpi	r24, 0x65	; 101
 2c8:	91 05       	cpc	r25, r1
 2ca:	94 f0       	brlt	.+36     	; 0x2f0 <checkGameStart+0x3c>
 2cc:	80 91 66 00 	lds	r24, 0x0066
 2d0:	90 91 67 00 	lds	r25, 0x0067
 2d4:	89 2b       	or	r24, r25
 2d6:	61 f4       	brne	.+24     	; 0x2f0 <checkGameStart+0x3c>
		ledStarted = 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 67 00 	sts	0x0067, r25
 2e0:	80 93 66 00 	sts	0x0066, r24
		buttonGamePressed = 0;
 2e4:	10 92 65 00 	sts	0x0065, r1
 2e8:	10 92 64 00 	sts	0x0064, r1
		startLedSeq();
 2ec:	0e 94 76 00 	call	0xec	; 0xec <startLedSeq>
 2f0:	08 95       	ret

000002f2 <__vector_1>:
/**
WHEN INT0 PIN IS DETECTED, CHECK THE VALUE OF "i" AND SEE
WHERE IT HAS REACHED. IF "i" HAS REACHED 15TH OR 16TH LED,
ENABLE LED ACCORDINGLY
**/
ISR(INT0_vect){
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
    stopSeq = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 6b 00 	sts	0x006B, r25
 31c:	80 93 6a 00 	sts	0x006A, r24
	if(i == 15){
 320:	80 91 62 00 	lds	r24, 0x0062
 324:	90 91 63 00 	lds	r25, 0x0063
 328:	0f 97       	sbiw	r24, 0x0f	; 15
 32a:	11 f4       	brne	.+4      	; 0x330 <__vector_1+0x3e>
		PORTD |= (1 << PIND0);
 32c:	90 9a       	sbi	0x12, 0	; 18
 32e:	24 c0       	rjmp	.+72     	; 0x378 <__vector_1+0x86>
        PORTD &= ~(1 << PIND1);
	}else if(i == 16){
 330:	80 91 62 00 	lds	r24, 0x0062
 334:	90 91 63 00 	lds	r25, 0x0063
 338:	40 97       	sbiw	r24, 0x10	; 16
 33a:	19 f4       	brne	.+6      	; 0x342 <__vector_1+0x50>
		PORTD |= (1 << PIND0);
 33c:	90 9a       	sbi	0x12, 0	; 18
        PORTD |= (1 << PIND1);
 33e:	91 9a       	sbi	0x12, 1	; 18
 340:	1c c0       	rjmp	.+56     	; 0x37a <__vector_1+0x88>
	}else{
		PORTD |= ((1 << PIND0) | (1 << PIND1));
 342:	82 b3       	in	r24, 0x12	; 18
 344:	83 60       	ori	r24, 0x03	; 3
 346:	82 bb       	out	0x12, r24	; 18
		delay(200);
 348:	68 ec       	ldi	r22, 0xC8	; 200
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 49 00 	call	0x92	; 0x92 <delay>
		PORTD &= ~(1 << PIND0);
 354:	90 98       	cbi	0x12, 0	; 18
		PORTD &= ~(1 << PIND1);
 356:	91 98       	cbi	0x12, 1	; 18
		delay(200);
 358:	68 ec       	ldi	r22, 0xC8	; 200
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 49 00 	call	0x92	; 0x92 <delay>
		PORTD |= ((1 << PIND0) | (1 << PIND1));
 364:	82 b3       	in	r24, 0x12	; 18
 366:	83 60       	ori	r24, 0x03	; 3
 368:	82 bb       	out	0x12, r24	; 18
		delay(200);
 36a:	68 ec       	ldi	r22, 0xC8	; 200
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 49 00 	call	0x92	; 0x92 <delay>
		PORTD &= ~(1 << PIND0);
 376:	90 98       	cbi	0x12, 0	; 18
		PORTD &= ~(1 << PIND1);
 378:	91 98       	cbi	0x12, 1	; 18
	}
	stopSeq = 0;
 37a:	10 92 6b 00 	sts	0x006B, r1
 37e:	10 92 6a 00 	sts	0x006A, r1
	
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <main>:
   /*** 
   INITIALIZE PORTS 
   two LED from PORTD are used as output LEDs
   i.e to measure your reaction time
   ***/
   DDRA = 0xff;   //PORTA as output
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	8a bb       	out	0x1a, r24	; 26
   DDRB = 0xff;   //PORTB as output   
 3a8:	87 bb       	out	0x17, r24	; 23
   DDRD = 0b11000011; //interrupt pins inputs
 3aa:	83 ec       	ldi	r24, 0xC3	; 195
 3ac:	81 bb       	out	0x11, r24	; 17
   /*** 
   INITIALIZE INTERRUPTS 
   USING INT0 i.e PD2 on RISING EDGE
   THESE SETTINGS HAVE ALREADY BEEN DISCUSSED IN EARLIER BLOGS
   ***/
   cli();  //clear global interrupts
 3ae:	f8 94       	cli
   GICR = 1 << INT0; //enable intrupt on INT0
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	8b bf       	out	0x3b, r24	; 59
   SREG = 1 << 7;
 3b4:	80 e8       	ldi	r24, 0x80	; 128
 3b6:	8f bf       	out	0x3f, r24	; 63
   MCUCR = 1 <<ISC01 | 1 <<ISC00;  // on rising edge
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	85 bf       	out	0x35, r24	; 53
   sei(); //enable global interrupts
 3bc:	78 94       	sei
   
   /*** 
   LIGHT UP ALL LEDS FOR 500ms 
   JUST TO TEST YOUR CONNECTION 
   ***/
   PORTB = 0xff;  //light up all leds when you start
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	88 bb       	out	0x18, r24	; 24
   PORTA = 0xff;  //light up all leds when you start
 3c2:	8b bb       	out	0x1b, r24	; 27
   PORTD |= ((1 << PIND0) | (1 << PIND1)); // light up the output led
 3c4:	82 b3       	in	r24, 0x12	; 18
 3c6:	83 60       	ori	r24, 0x03	; 3
 3c8:	82 bb       	out	0x12, r24	; 18
 3ca:	88 e8       	ldi	r24, 0x88	; 136
 3cc:	93 e1       	ldi	r25, 0x13	; 19
 3ce:	29 e1       	ldi	r18, 0x19	; 25
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3da:	d9 f7       	brne	.-10     	; 0x3d2 <main+0x2e>
   _delay_ms(500);
   PORTB = 0x00;
 3dc:	18 ba       	out	0x18, r1	; 24
   PORTA = 0x00;
 3de:	1b ba       	out	0x1b, r1	; 27
   PORTD &= ~(1 << PIND0);
 3e0:	90 98       	cbi	0x12, 0	; 18
   PORTD &= ~(1 << PIND1);
 3e2:	91 98       	cbi	0x12, 1	; 18
   
   /** 
   INITIALIZE ALL VARIABLES AND SET SPEED LEVELS 
   SETTING UP 10 SPECIFIED SPEED LEVELS WHICH CAN BE INCREASED AS WELL 
   ***/
   ledStarted = 0;
 3e4:	10 92 67 00 	sts	0x0067, r1
 3e8:	10 92 66 00 	sts	0x0066, r1
   speed[0] = 100;
 3ec:	84 e6       	ldi	r24, 0x64	; 100
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	90 93 6d 00 	sts	0x006D, r25
 3f4:	80 93 6c 00 	sts	0x006C, r24
   speed[1] = 50;
 3f8:	82 e3       	ldi	r24, 0x32	; 50
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	90 93 6f 00 	sts	0x006F, r25
 400:	80 93 6e 00 	sts	0x006E, r24
   speed[2] = 75;
 404:	8b e4       	ldi	r24, 0x4B	; 75
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	90 93 71 00 	sts	0x0071, r25
 40c:	80 93 70 00 	sts	0x0070, r24
   speed[3] = 85;
 410:	85 e5       	ldi	r24, 0x55	; 85
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 73 00 	sts	0x0073, r25
 418:	80 93 72 00 	sts	0x0072, r24
   speed[4] = 40;
 41c:	88 e2       	ldi	r24, 0x28	; 40
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	90 93 75 00 	sts	0x0075, r25
 424:	80 93 74 00 	sts	0x0074, r24
   speed[5] = 125;
 428:	8d e7       	ldi	r24, 0x7D	; 125
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 77 00 	sts	0x0077, r25
 430:	80 93 76 00 	sts	0x0076, r24
   speed[6] = 60;
 434:	8c e3       	ldi	r24, 0x3C	; 60
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 79 00 	sts	0x0079, r25
 43c:	80 93 78 00 	sts	0x0078, r24
   speed[7] = 80;
 440:	80 e5       	ldi	r24, 0x50	; 80
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 7b 00 	sts	0x007B, r25
 448:	80 93 7a 00 	sts	0x007A, r24
   speed[8] = 90;
 44c:	8a e5       	ldi	r24, 0x5A	; 90
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	90 93 7d 00 	sts	0x007D, r25
 454:	80 93 7c 00 	sts	0x007C, r24
   speed[9] = 110;
 458:	8e e6       	ldi	r24, 0x6E	; 110
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 7f 00 	sts	0x007F, r25
 460:	80 93 7e 00 	sts	0x007E, r24
   
   while(1){
       
	   if(bit_is_set(PIND,6)){
 464:	86 9b       	sbis	0x10, 6	; 16
 466:	fe cf       	rjmp	.-4      	; 0x464 <__stack+0x5>
	      /**
		  AS SOON AS PUSH BUTTON CONNECTED TO PD6 IS PRESSED
		  START LED SEQUENCE
		  **/
		  checkGameStart();
 468:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <checkGameStart>
 46c:	fb cf       	rjmp	.-10     	; 0x464 <__stack+0x5>

0000046e <__cmpsf2>:
 46e:	6c d0       	rcall	.+216    	; 0x548 <__fp_cmp>
 470:	08 f4       	brcc	.+2      	; 0x474 <__cmpsf2+0x6>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	08 95       	ret

00000476 <__fixunssfsi>:
 476:	94 d0       	rcall	.+296    	; 0x5a0 <__fp_splitA>
 478:	88 f0       	brcs	.+34     	; 0x49c <__fixunssfsi+0x26>
 47a:	9f 57       	subi	r25, 0x7F	; 127
 47c:	90 f0       	brcs	.+36     	; 0x4a2 <__fixunssfsi+0x2c>
 47e:	b9 2f       	mov	r27, r25
 480:	99 27       	eor	r25, r25
 482:	b7 51       	subi	r27, 0x17	; 23
 484:	a0 f0       	brcs	.+40     	; 0x4ae <__fixunssfsi+0x38>
 486:	d1 f0       	breq	.+52     	; 0x4bc <__fixunssfsi+0x46>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a f0       	brmi	.+6      	; 0x498 <__fixunssfsi+0x22>
 492:	ba 95       	dec	r27
 494:	c9 f7       	brne	.-14     	; 0x488 <__fixunssfsi+0x12>
 496:	12 c0       	rjmp	.+36     	; 0x4bc <__fixunssfsi+0x46>
 498:	b1 30       	cpi	r27, 0x01	; 1
 49a:	81 f0       	breq	.+32     	; 0x4bc <__fixunssfsi+0x46>
 49c:	9b d0       	rcall	.+310    	; 0x5d4 <__fp_zero>
 49e:	b1 e0       	ldi	r27, 0x01	; 1
 4a0:	08 95       	ret
 4a2:	98 c0       	rjmp	.+304    	; 0x5d4 <__fp_zero>
 4a4:	67 2f       	mov	r22, r23
 4a6:	78 2f       	mov	r23, r24
 4a8:	88 27       	eor	r24, r24
 4aa:	b8 5f       	subi	r27, 0xF8	; 248
 4ac:	39 f0       	breq	.+14     	; 0x4bc <__fixunssfsi+0x46>
 4ae:	b9 3f       	cpi	r27, 0xF9	; 249
 4b0:	cc f3       	brlt	.-14     	; 0x4a4 <__fixunssfsi+0x2e>
 4b2:	86 95       	lsr	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b3 95       	inc	r27
 4ba:	d9 f7       	brne	.-10     	; 0x4b2 <__fixunssfsi+0x3c>
 4bc:	3e f4       	brtc	.+14     	; 0x4cc <__fixunssfsi+0x56>
 4be:	90 95       	com	r25
 4c0:	80 95       	com	r24
 4c2:	70 95       	com	r23
 4c4:	61 95       	neg	r22
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	08 95       	ret

000004ce <__floatunsisf>:
 4ce:	e8 94       	clt
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <__floatsisf+0x12>

000004d2 <__floatsisf>:
 4d2:	97 fb       	bst	r25, 7
 4d4:	3e f4       	brtc	.+14     	; 0x4e4 <__floatsisf+0x12>
 4d6:	90 95       	com	r25
 4d8:	80 95       	com	r24
 4da:	70 95       	com	r23
 4dc:	61 95       	neg	r22
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	99 23       	and	r25, r25
 4e6:	a9 f0       	breq	.+42     	; 0x512 <__floatsisf+0x40>
 4e8:	f9 2f       	mov	r31, r25
 4ea:	96 e9       	ldi	r25, 0x96	; 150
 4ec:	bb 27       	eor	r27, r27
 4ee:	93 95       	inc	r25
 4f0:	f6 95       	lsr	r31
 4f2:	87 95       	ror	r24
 4f4:	77 95       	ror	r23
 4f6:	67 95       	ror	r22
 4f8:	b7 95       	ror	r27
 4fa:	f1 11       	cpse	r31, r1
 4fc:	f8 cf       	rjmp	.-16     	; 0x4ee <__floatsisf+0x1c>
 4fe:	fa f4       	brpl	.+62     	; 0x53e <__floatsisf+0x6c>
 500:	bb 0f       	add	r27, r27
 502:	11 f4       	brne	.+4      	; 0x508 <__floatsisf+0x36>
 504:	60 ff       	sbrs	r22, 0
 506:	1b c0       	rjmp	.+54     	; 0x53e <__floatsisf+0x6c>
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	16 c0       	rjmp	.+44     	; 0x53e <__floatsisf+0x6c>
 512:	88 23       	and	r24, r24
 514:	11 f0       	breq	.+4      	; 0x51a <__floatsisf+0x48>
 516:	96 e9       	ldi	r25, 0x96	; 150
 518:	11 c0       	rjmp	.+34     	; 0x53c <__floatsisf+0x6a>
 51a:	77 23       	and	r23, r23
 51c:	21 f0       	breq	.+8      	; 0x526 <__floatsisf+0x54>
 51e:	9e e8       	ldi	r25, 0x8E	; 142
 520:	87 2f       	mov	r24, r23
 522:	76 2f       	mov	r23, r22
 524:	05 c0       	rjmp	.+10     	; 0x530 <__floatsisf+0x5e>
 526:	66 23       	and	r22, r22
 528:	71 f0       	breq	.+28     	; 0x546 <__floatsisf+0x74>
 52a:	96 e8       	ldi	r25, 0x86	; 134
 52c:	86 2f       	mov	r24, r22
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	2a f0       	brmi	.+10     	; 0x53e <__floatsisf+0x6c>
 534:	9a 95       	dec	r25
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	da f7       	brpl	.-10     	; 0x534 <__floatsisf+0x62>
 53e:	88 0f       	add	r24, r24
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	97 f9       	bld	r25, 7
 546:	08 95       	ret

00000548 <__fp_cmp>:
 548:	99 0f       	add	r25, r25
 54a:	00 08       	sbc	r0, r0
 54c:	55 0f       	add	r21, r21
 54e:	aa 0b       	sbc	r26, r26
 550:	e0 e8       	ldi	r30, 0x80	; 128
 552:	fe ef       	ldi	r31, 0xFE	; 254
 554:	16 16       	cp	r1, r22
 556:	17 06       	cpc	r1, r23
 558:	e8 07       	cpc	r30, r24
 55a:	f9 07       	cpc	r31, r25
 55c:	c0 f0       	brcs	.+48     	; 0x58e <__fp_cmp+0x46>
 55e:	12 16       	cp	r1, r18
 560:	13 06       	cpc	r1, r19
 562:	e4 07       	cpc	r30, r20
 564:	f5 07       	cpc	r31, r21
 566:	98 f0       	brcs	.+38     	; 0x58e <__fp_cmp+0x46>
 568:	62 1b       	sub	r22, r18
 56a:	73 0b       	sbc	r23, r19
 56c:	84 0b       	sbc	r24, r20
 56e:	95 0b       	sbc	r25, r21
 570:	39 f4       	brne	.+14     	; 0x580 <__fp_cmp+0x38>
 572:	0a 26       	eor	r0, r26
 574:	61 f0       	breq	.+24     	; 0x58e <__fp_cmp+0x46>
 576:	23 2b       	or	r18, r19
 578:	24 2b       	or	r18, r20
 57a:	25 2b       	or	r18, r21
 57c:	21 f4       	brne	.+8      	; 0x586 <__fp_cmp+0x3e>
 57e:	08 95       	ret
 580:	0a 26       	eor	r0, r26
 582:	09 f4       	brne	.+2      	; 0x586 <__fp_cmp+0x3e>
 584:	a1 40       	sbci	r26, 0x01	; 1
 586:	a6 95       	lsr	r26
 588:	8f ef       	ldi	r24, 0xFF	; 255
 58a:	81 1d       	adc	r24, r1
 58c:	81 1d       	adc	r24, r1
 58e:	08 95       	ret

00000590 <__fp_split3>:
 590:	57 fd       	sbrc	r21, 7
 592:	90 58       	subi	r25, 0x80	; 128
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	59 f0       	breq	.+22     	; 0x5b0 <__fp_splitA+0x10>
 59a:	5f 3f       	cpi	r21, 0xFF	; 255
 59c:	71 f0       	breq	.+28     	; 0x5ba <__fp_splitA+0x1a>
 59e:	47 95       	ror	r20

000005a0 <__fp_splitA>:
 5a0:	88 0f       	add	r24, r24
 5a2:	97 fb       	bst	r25, 7
 5a4:	99 1f       	adc	r25, r25
 5a6:	61 f0       	breq	.+24     	; 0x5c0 <__fp_splitA+0x20>
 5a8:	9f 3f       	cpi	r25, 0xFF	; 255
 5aa:	79 f0       	breq	.+30     	; 0x5ca <__fp_splitA+0x2a>
 5ac:	87 95       	ror	r24
 5ae:	08 95       	ret
 5b0:	12 16       	cp	r1, r18
 5b2:	13 06       	cpc	r1, r19
 5b4:	14 06       	cpc	r1, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	f2 cf       	rjmp	.-28     	; 0x59e <__fp_split3+0xe>
 5ba:	46 95       	lsr	r20
 5bc:	f1 df       	rcall	.-30     	; 0x5a0 <__fp_splitA>
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__fp_splitA+0x30>
 5c0:	16 16       	cp	r1, r22
 5c2:	17 06       	cpc	r1, r23
 5c4:	18 06       	cpc	r1, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	f1 cf       	rjmp	.-30     	; 0x5ac <__fp_splitA+0xc>
 5ca:	86 95       	lsr	r24
 5cc:	71 05       	cpc	r23, r1
 5ce:	61 05       	cpc	r22, r1
 5d0:	08 94       	sec
 5d2:	08 95       	ret

000005d4 <__fp_zero>:
 5d4:	e8 94       	clt

000005d6 <__fp_szero>:
 5d6:	bb 27       	eor	r27, r27
 5d8:	66 27       	eor	r22, r22
 5da:	77 27       	eor	r23, r23
 5dc:	cb 01       	movw	r24, r22
 5de:	97 f9       	bld	r25, 7
 5e0:	08 95       	ret

000005e2 <__gesf2>:
 5e2:	b2 df       	rcall	.-156    	; 0x548 <__fp_cmp>
 5e4:	08 f4       	brcc	.+2      	; 0x5e8 <__gesf2+0x6>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__mulsf3>:
 5ea:	0b d0       	rcall	.+22     	; 0x602 <__mulsf3x>
 5ec:	78 c0       	rjmp	.+240    	; 0x6de <__fp_round>
 5ee:	69 d0       	rcall	.+210    	; 0x6c2 <__fp_pscA>
 5f0:	28 f0       	brcs	.+10     	; 0x5fc <__mulsf3+0x12>
 5f2:	6e d0       	rcall	.+220    	; 0x6d0 <__fp_pscB>
 5f4:	18 f0       	brcs	.+6      	; 0x5fc <__mulsf3+0x12>
 5f6:	95 23       	and	r25, r21
 5f8:	09 f0       	breq	.+2      	; 0x5fc <__mulsf3+0x12>
 5fa:	5a c0       	rjmp	.+180    	; 0x6b0 <__fp_inf>
 5fc:	5f c0       	rjmp	.+190    	; 0x6bc <__fp_nan>
 5fe:	11 24       	eor	r1, r1
 600:	ea cf       	rjmp	.-44     	; 0x5d6 <__fp_szero>

00000602 <__mulsf3x>:
 602:	c6 df       	rcall	.-116    	; 0x590 <__fp_split3>
 604:	a0 f3       	brcs	.-24     	; 0x5ee <__mulsf3+0x4>

00000606 <__mulsf3_pse>:
 606:	95 9f       	mul	r25, r21
 608:	d1 f3       	breq	.-12     	; 0x5fe <__mulsf3+0x14>
 60a:	95 0f       	add	r25, r21
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	55 1f       	adc	r21, r21
 610:	62 9f       	mul	r22, r18
 612:	f0 01       	movw	r30, r0
 614:	72 9f       	mul	r23, r18
 616:	bb 27       	eor	r27, r27
 618:	f0 0d       	add	r31, r0
 61a:	b1 1d       	adc	r27, r1
 61c:	63 9f       	mul	r22, r19
 61e:	aa 27       	eor	r26, r26
 620:	f0 0d       	add	r31, r0
 622:	b1 1d       	adc	r27, r1
 624:	aa 1f       	adc	r26, r26
 626:	64 9f       	mul	r22, r20
 628:	66 27       	eor	r22, r22
 62a:	b0 0d       	add	r27, r0
 62c:	a1 1d       	adc	r26, r1
 62e:	66 1f       	adc	r22, r22
 630:	82 9f       	mul	r24, r18
 632:	22 27       	eor	r18, r18
 634:	b0 0d       	add	r27, r0
 636:	a1 1d       	adc	r26, r1
 638:	62 1f       	adc	r22, r18
 63a:	73 9f       	mul	r23, r19
 63c:	b0 0d       	add	r27, r0
 63e:	a1 1d       	adc	r26, r1
 640:	62 1f       	adc	r22, r18
 642:	83 9f       	mul	r24, r19
 644:	a0 0d       	add	r26, r0
 646:	61 1d       	adc	r22, r1
 648:	22 1f       	adc	r18, r18
 64a:	74 9f       	mul	r23, r20
 64c:	33 27       	eor	r19, r19
 64e:	a0 0d       	add	r26, r0
 650:	61 1d       	adc	r22, r1
 652:	23 1f       	adc	r18, r19
 654:	84 9f       	mul	r24, r20
 656:	60 0d       	add	r22, r0
 658:	21 1d       	adc	r18, r1
 65a:	82 2f       	mov	r24, r18
 65c:	76 2f       	mov	r23, r22
 65e:	6a 2f       	mov	r22, r26
 660:	11 24       	eor	r1, r1
 662:	9f 57       	subi	r25, 0x7F	; 127
 664:	50 40       	sbci	r21, 0x00	; 0
 666:	8a f0       	brmi	.+34     	; 0x68a <__mulsf3_pse+0x84>
 668:	e1 f0       	breq	.+56     	; 0x6a2 <__mulsf3_pse+0x9c>
 66a:	88 23       	and	r24, r24
 66c:	4a f0       	brmi	.+18     	; 0x680 <__mulsf3_pse+0x7a>
 66e:	ee 0f       	add	r30, r30
 670:	ff 1f       	adc	r31, r31
 672:	bb 1f       	adc	r27, r27
 674:	66 1f       	adc	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	91 50       	subi	r25, 0x01	; 1
 67c:	50 40       	sbci	r21, 0x00	; 0
 67e:	a9 f7       	brne	.-22     	; 0x66a <__mulsf3_pse+0x64>
 680:	9e 3f       	cpi	r25, 0xFE	; 254
 682:	51 05       	cpc	r21, r1
 684:	70 f0       	brcs	.+28     	; 0x6a2 <__mulsf3_pse+0x9c>
 686:	14 c0       	rjmp	.+40     	; 0x6b0 <__fp_inf>
 688:	a6 cf       	rjmp	.-180    	; 0x5d6 <__fp_szero>
 68a:	5f 3f       	cpi	r21, 0xFF	; 255
 68c:	ec f3       	brlt	.-6      	; 0x688 <__mulsf3_pse+0x82>
 68e:	98 3e       	cpi	r25, 0xE8	; 232
 690:	dc f3       	brlt	.-10     	; 0x688 <__mulsf3_pse+0x82>
 692:	86 95       	lsr	r24
 694:	77 95       	ror	r23
 696:	67 95       	ror	r22
 698:	b7 95       	ror	r27
 69a:	f7 95       	ror	r31
 69c:	e7 95       	ror	r30
 69e:	9f 5f       	subi	r25, 0xFF	; 255
 6a0:	c1 f7       	brne	.-16     	; 0x692 <__mulsf3_pse+0x8c>
 6a2:	fe 2b       	or	r31, r30
 6a4:	88 0f       	add	r24, r24
 6a6:	91 1d       	adc	r25, r1
 6a8:	96 95       	lsr	r25
 6aa:	87 95       	ror	r24
 6ac:	97 f9       	bld	r25, 7
 6ae:	08 95       	ret

000006b0 <__fp_inf>:
 6b0:	97 f9       	bld	r25, 7
 6b2:	9f 67       	ori	r25, 0x7F	; 127
 6b4:	80 e8       	ldi	r24, 0x80	; 128
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	08 95       	ret

000006bc <__fp_nan>:
 6bc:	9f ef       	ldi	r25, 0xFF	; 255
 6be:	80 ec       	ldi	r24, 0xC0	; 192
 6c0:	08 95       	ret

000006c2 <__fp_pscA>:
 6c2:	00 24       	eor	r0, r0
 6c4:	0a 94       	dec	r0
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	09 06       	cpc	r0, r25
 6ce:	08 95       	ret

000006d0 <__fp_pscB>:
 6d0:	00 24       	eor	r0, r0
 6d2:	0a 94       	dec	r0
 6d4:	12 16       	cp	r1, r18
 6d6:	13 06       	cpc	r1, r19
 6d8:	14 06       	cpc	r1, r20
 6da:	05 06       	cpc	r0, r21
 6dc:	08 95       	ret

000006de <__fp_round>:
 6de:	09 2e       	mov	r0, r25
 6e0:	03 94       	inc	r0
 6e2:	00 0c       	add	r0, r0
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__fp_round+0xc>
 6e6:	88 23       	and	r24, r24
 6e8:	52 f0       	brmi	.+20     	; 0x6fe <__fp_round+0x20>
 6ea:	bb 0f       	add	r27, r27
 6ec:	40 f4       	brcc	.+16     	; 0x6fe <__fp_round+0x20>
 6ee:	bf 2b       	or	r27, r31
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <__fp_round+0x18>
 6f2:	60 ff       	sbrs	r22, 0
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__fp_round+0x20>
 6f6:	6f 5f       	subi	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <_exit>:
 700:	f8 94       	cli

00000702 <__stop_program>:
 702:	ff cf       	rjmp	.-2      	; 0x702 <__stop_program>
