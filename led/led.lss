
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000123  00000000  00000000  00000155  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d0  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a8  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009f  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000005af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000005ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define tbi(x,y) x ^= _BV(y) //toggle bit - using bitwise XOR operator
#define is_high(x,y) (x & _BV(y) == _BV(y)) //check if the y'th bit of register 'x' is high ... test if its AND with 1 is 1

int main(void)
{
	DDRB |= 1 << PINB0; //set pin0 output
  6c:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PINB1); // set pin1 input
  6e:	b9 98       	cbi	0x17, 1	; 23
	DDRB |= (1 << PINB2); // set pin2 output
  70:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1 << PINB3); // set pin2 output
  72:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1 << PINB4); // set pin2 output
  74:	bc 9a       	sbi	0x17, 4	; 23
	
	
	PORTB |= 1 << PINB0;	
  76:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~(1 << PINB2);
  78:	c2 98       	cbi	0x18, 2	; 24
	PORTB |= 1 << PINB3;
  7a:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= 1 << PINB4;
  7c:	c4 9a       	sbi	0x18, 4	; 24
  7e:	84 ef       	ldi	r24, 0xF4	; 244
  80:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	28 ec       	ldi	r18, 0xC8	; 200
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	f9 01       	movw	r30, r18
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8e:	d9 f7       	brne	.-10     	; 0x86 <main+0x1a>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
	while(1){
		if(bit_is_clear(PINB,1)){
		    PORTB |= 1 << PINB3;
			PORTB &= ~(1 << PINB4);
			if(press == 0){
			   PORTB ^= 1 << PINB0; //toggle pin
  94:	31 e0       	ldi	r19, 0x01	; 1
			   PORTB ^= 1 << PINB2; //toggle pin
  96:	24 e0       	ldi	r18, 0x04	; 4
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
	
	_delay_ms(50);
	
	int press = 0;
	while(1){
		if(bit_is_clear(PINB,1)){
  9e:	b1 99       	sbic	0x16, 1	; 22
  a0:	0b c0       	rjmp	.+22     	; 0xb8 <main+0x4c>
		    PORTB |= 1 << PINB3;
  a2:	c3 9a       	sbi	0x18, 3	; 24
			PORTB &= ~(1 << PINB4);
  a4:	c4 98       	cbi	0x18, 4	; 24
			if(press == 0){
  a6:	89 2b       	or	r24, r25
  a8:	c1 f7       	brne	.-16     	; 0x9a <main+0x2e>
			   PORTB ^= 1 << PINB0; //toggle pin
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	83 27       	eor	r24, r19
  ae:	88 bb       	out	0x18, r24	; 24
			   PORTB ^= 1 << PINB2; //toggle pin
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	82 27       	eor	r24, r18
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <main+0x2e>
			   press = 1;
		   }
		}else{
		   press = 0;
		   PORTB |= 1 << PINB4;
  b8:	c4 9a       	sbi	0x18, 4	; 24
		   PORTB &= ~(1 << PINB3);
  ba:	c3 98       	cbi	0x18, 3	; 24
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	ee cf       	rjmp	.-36     	; 0x9e <main+0x32>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
