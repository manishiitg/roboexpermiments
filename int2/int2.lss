
int2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000049  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b2  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d8  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000093  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_18>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>


ISR(INT2_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTB ^= 1 << PINB3;
  7a:	88 b3       	in	r24, 0x18	; 24
  7c:	98 e0       	ldi	r25, 0x08	; 8
  7e:	89 27       	eor	r24, r25
  80:	88 bb       	out	0x18, r24	; 24
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <__vector_2>:
ISR(INT1_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	PORTB ^= 1 << PINB1;
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	92 e0       	ldi	r25, 0x02	; 2
  a2:	89 27       	eor	r24, r25
  a4:	88 bb       	out	0x18, r24	; 24
}
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_1>:
ISR(INT0_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	PORTB ^= 1 << PINB0;
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	89 27       	eor	r24, r25
  c8:	88 bb       	out	0x18, r24	; 24
   
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:
int main(void){

   DDRB |= ((1 << PINB0) | (1 << PINB1) | (1 << PINB3)); //set pin0 as output
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	8b 60       	ori	r24, 0x0B	; 11
  dc:	87 bb       	out	0x17, r24	; 23
   DDRB &= ~(1 << PINB2);
  de:	ba 98       	cbi	0x17, 2	; 23
   DDRD=0b11001111; //interrupt pins inputs, rest outputs
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	81 bb       	out	0x11, r24	; 17

   cli();  //clear global interrupts
  e4:	f8 94       	cli
   GICR = (1 << INT0 | 1 << INT1 | 1 << INT2); //enable intrupt on INT0
  e6:	80 ee       	ldi	r24, 0xE0	; 224
  e8:	8b bf       	out	0x3b, r24	; 59
   SREG = 1 << 7;
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	8f bf       	out	0x3f, r24	; 63
   //MCUCR = 1<<ISC01 | 1<<ISC00;  // on rising edge
   
   MCUCR = (1<<ISC01 | 0<<ISC00 | 1 << ISC11 | 1 << ISC10 | 1 << ISC2);  // on rising edge
  ee:	8e e4       	ldi	r24, 0x4E	; 78
  f0:	85 bf       	out	0x35, r24	; 53
   
   sei(); //enable global interrupts
  f2:	78 94       	sei
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x1c>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
