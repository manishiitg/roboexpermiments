
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  00000123  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000079  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000074  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main (void)
{
   DDRD |= (1 << PIND4 | 1 << PIND5); // Set LED as output
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 63       	ori	r24, 0x30	; 48
  70:	81 bb       	out	0x11, r24	; 17

   TCCR1B |= (1 << WGM12 | 1 << CS10 | 1 << CS11); // Configure timer 1 for CTC mode with 64 prescale
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	8b 60       	ori	r24, 0x0B	; 11
  76:	8e bd       	out	0x2e, r24	; 46

   OCR1A   = 15624; // Set CTC compare value 
  78:	88 e0       	ldi	r24, 0x08	; 8
  7a:	9d e3       	ldi	r25, 0x3D	; 61
  7c:	9b bd       	out	0x2b, r25	; 43
  7e:	8a bd       	out	0x2a, r24	; 42
   
   OCR1B = 3906; // Set CTC compare value 
  80:	82 e4       	ldi	r24, 0x42	; 66
  82:	9f e0       	ldi	r25, 0x0F	; 15
  84:	99 bd       	out	0x29, r25	; 41
  86:	88 bd       	out	0x28, r24	; 40
   
   TCCR1A |= (1 << COM1A0 | 1 << COM1B0);
  88:	8f b5       	in	r24, 0x2f	; 47
  8a:	80 65       	ori	r24, 0x50	; 80
  8c:	8f bd       	out	0x2f, r24	; 47
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0x22>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
